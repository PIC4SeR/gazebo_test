#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rclpy.executors import MultiThreadedExecutor
from example_interfaces.srv import AddTwoInts
import asyncio
import threading


class AsyncServiceClient(Node):
    def __init__(self):
        super().__init__("async_service_client")
        self.cli = self.create_client(AddTwoInts, "add_two_ints")
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info("Service not available, waiting...")
        self.req = AddTwoInts.Request()

    def send_request(self, a, b):
        self.req.a = a
        self.req.b = b
        return self.cli.call_async(self.req)


async def call_services_sequentially(client_node):
    # First service call
    future1 = client_node.send_request(1, 2)
    response1 = await future1
    client_node.get_logger().info(f"First call result: {response1.sum}")

    # Second service call
    future2 = client_node.send_request(3, 4)
    response2 = await future2
    client_node.get_logger().info(f"Second call result: {response2.sum}")

    # Third service call
    future3 = client_node.send_request(5, 6)
    response3 = await future3
    client_node.get_logger().info(f"Third call result: {response3.sum}")


def main():
    rclpy.init()
    client_node = AsyncServiceClient()

    # Create a MultiThreadedExecutor
    executor = MultiThreadedExecutor()
    executor.add_node(client_node)

    # Start the executor in a separate thread
    executor_thread = threading.Thread(target=executor.spin, daemon=True)
    executor_thread.start()

    # Run the asyncio event loop
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(call_services_sequentially(client_node))
    finally:
        client_node.destroy_node()
        rclpy.shutdown()
        executor_thread.join()


if __name__ == "__main__":
    main()
