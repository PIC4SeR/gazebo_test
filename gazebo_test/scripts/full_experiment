#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
import argparse
import libtmux
import os
import time
import shtab
import argcomplete
from pathlib import Path
import pandas as pd
import yaml
from ament_index_python.packages import get_package_share_directory


def print_summary(log_path: Path):
    """
    Print the summary of the gazebo test.
    """
    # Check if the log file exists
    if not os.path.exists(log_path):
        print(f"Log file {log_path} does not exist.")
        return

    # Read the csv file and print the summary in a table format
    df = pd.read_csv(log_path)
    # Print the summary of the gazebo test
    print("Summary of the gazebo test:")
    print("--------------------------------------------------")
    print(f"Number of total experiments: {len(df)}")
    print("--------------------------------------------------")
    # Print the columns of the dataframe
    print("--------------------------------------------------")
    print(df)
    print("--------------------------------------------------")


def parse_experiment_name(experiment_name: str):
    """
    Parse the experiment name and return the world, map, and goals_and_poses.
    """
    # Define the path to the experiments directory
    experiment_file = os.path.join(
        get_package_share_directory("gazebo_test"),
        "experiments",
        "experiments.yaml",
    )
    # Check if the file exists
    if not os.path.exists(experiment_file):
        raise FileNotFoundError(f"File {experiment_file} does not exist.")

    # Load the YAML file
    with open(experiment_file, "r") as file:
        experiments = yaml.safe_load(file)
    # Check if the experiment name exists in the file
    if experiment_name not in experiments:
        raise ValueError(f"Experiment {experiment_name} does not exist in the file.")

    # Get the world, map, and goals_and_poses from the file
    world = experiments[experiment_name]["world"]
    map = experiments[experiment_name]["map"]
    goals_and_poses = experiments[experiment_name]["goals_and_poses"]
    world_pkg_name = experiments[experiment_name]["world_pkg_name"]
    world_pkg_path = os.path.join(
        get_package_share_directory(world_pkg_name),
        "worlds",
        world,
    )
    agents_configuration_file = experiments[experiment_name][
        "agents_configuration_file"
    ]
    agents_pkg_name = experiments[experiment_name]["config_pkg_name"]
    agents_pkg_path = os.path.join(
        get_package_share_directory(agents_pkg_name),
        "config",
        agents_configuration_file,
    )

    # check if the world, map, and goals_and_poses are absolute paths
    if not os.path.isabs(map):
        map = os.path.join(
            get_package_share_directory("gazebo_test"),
            map,
        )
    if not os.path.isabs(goals_and_poses):
        goals_and_poses = os.path.join(
            get_package_share_directory("gazebo_test"),
            goals_and_poses,
        )
    # Check if the world, map, and goals_and_poses exist
    if not os.path.exists(world_pkg_path):
        raise FileNotFoundError(f"World file {world_pkg_path} does not exist.")
    if not os.path.exists(map):
        raise FileNotFoundError(f"Map file {map} does not exist.")
    if not os.path.exists(goals_and_poses):
        raise FileNotFoundError(
            f"Goals and poses file {goals_and_poses} does not exist."
        )
    if not os.path.exists(agents_pkg_path):
        raise FileNotFoundError(
            f"Agents configuration file {agents_pkg_path} does not exist."
        )
    return (
        world,
        map,
        goals_and_poses,
        agents_configuration_file,
        world_pkg_name,
        agents_pkg_name,
    )


def setup_argcomplete():
    """
    Setup argcomplete for the script.
    """
    # Get the path to the experiments directory
    experiments_dir = os.path.join(
        get_package_share_directory("gazebo_test"),
        "experiments",
    )
    # Check if the directory exists
    if not os.path.exists(experiments_dir):
        raise FileNotFoundError(f"Directory {experiments_dir} does not exist.")

    # Get the list of files in the directory
    files = os.listdir(experiments_dir)
    # Filter the files to only include YAML files
    yaml_files = [f for f in files if f.endswith(".yaml")]
    # Get the names of the experiments from the YAML files
    experiment_names = [f.split(".")[0] for f in yaml_files]

    # Register the completion function
    shtab.register_completion(
        "experiment",
        choices=experiment_names,
        help="The name of the experiment to run",
    )


def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(
        description="Script to control bag recording and headless mode."
    )
    parser.add_argument(
        "--bag-record", action="store_true", help="Enable bag recording"
    )
    parser.add_argument(
        "--headless", action="store_true", help="Run Gazebo in headless mode"
    )

    parser.add_argument("--no-rviz", action="store_true", help="Do not start RViz")

    parser.add_argument(
        "--wait-after-finish",
        action="store_true",
        help="Wait for the user to press Ctrl+C after the test is finished",
    )

    parser.add_argument(
        "--no-gpu",
        action="store_true",
        help="Do not use GPU for rendering (use CPU instead)",
    )

    parser.add_argument(
        "experiment",
        action="store",
        default="social_nav",
        help="The name of the experiment to run",
    )
    # Setup argcomplete
    # setup_argcomplete()
    # Add the completion function for the experiment argument

    # world, map, goals_and_poses = parse_experiment_name(parser.parse_args().experiment)
    (
        world,
        map,
        goals_and_poses,
        agents_configuration_file,
        world_pkg_name,
        agents_pkg_name,
    ) = parse_experiment_name(parser.parse_args().experiment)

    # Hook argcomplete
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    # Create a new tmux server
    server = libtmux.Server()
    # Check if the session already exists
    session_name = "gazebo_test"
    try:
        if session_name in server.sessions:
            print(f"Session '{session_name}' already exists. Exiting.")
            return
    except libtmux.exc.LibTmuxException:
        print("Tmux server not running. Starting a new server.")

    # Create a new tmux session
    with libtmux.Server() as server:
        with server.new_session(session_name=session_name) as session:
            print(f"Created new session: {session_name}")

            # Create a window for gazebo simulation
            window = session.active_window
            window.rename_window("Gazebo")
            print("Created new window: Gazebo")
            # Start the Gazebo simulation
            # pane = window.split(attach=True)
            pane = window.panes[0]
            pane.select()
            gpu_env_var = (
                "__GLX_VENDOR_LIBRARY_NAME=nvidia __NV_PRIME_RENDER_OFFLOAD=1 "
                if not args.no_gpu
                else ""
            )
            pane.send_keys(
                f"{gpu_env_var}ros2 launch gazebo_sim simulation.launch.py headless:={args.headless} world_pkg_name:={world_pkg_name} base_world:={world} \
                    agents_configuration_file:={agents_configuration_file} config_pkg_name:={agents_pkg_name} \
                        use_lidar_gpu:={not args.no_gpu}"
            )
            print("Started Gazebo simulation")

            session.new_window(attach=True, window_name="Navigation")
            window = session.active_window
            window.rename_window("Navigation")
            print("Created new window: Navigation")
            # Start the navigation stack
            pane = window.panes[0]
            pane.select()
            pane.send_keys(f"ros2 launch gazebo_test bringup.launch.py map:={map}")
            print("Started navigation stack")

            # Create a new pane for RViz
            if not args.no_rviz:
                session.new_window(attach=True, window_name="RViz")
                window = session.active_window
                window.rename_window("RViz")
                print("Created new window: RViz")
                # Start RViz
                pane = window.panes[0]
                pane.select()
                pane.send_keys("ros2 launch gazebo_test rviz.launch.py")
                print("Started RViz")

            session.new_window(attach=True)
            window = session.active_window
            window.rename_window("gazebo test")
            print("Created new window: gazebo test")
            # Start the gazebo test
            pane = window.panes[0]
            pane.select()
            pane.send_keys(
                f"ros2 launch gazebo_test experiment_manager.launch.py use_recorder:={args.bag_record}\
                    goals_and_poses_file:={goals_and_poses} ; tmux wait-for -S process_finished"
            )
            print("Started gazebo test")

            # run until the user presses Ctrl+C or until the gazebo test is finished

            try:
                server.cmd("wait-for", "process_finished")
                print("Gazebo test finished")
                # retrieve the log of the gazebo test
                current_panel = "".join(pane.capture_pane())
                # get the path of the log file
                log_path = current_panel.split("saved to ")[-1].split("[")[0]
                # remove leading and trailing spaces
                log_path = log_path.strip()
                print_summary(log_path)
                # wait until the keyboard interrupt
                if args.wait_after_finish:
                    print("Press Ctrl+C to exit...")
                    while True:
                        time.sleep(1)
            except KeyboardInterrupt:
                print("Exiting...")


if __name__ == "__main__":
    main()
