#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_srvs.srv import Trigger
import asyncio
import threading


class AsyncServiceNode(Node):
    def __init__(self):
        super().__init__("async_service_node")
        self.loop = asyncio.new_event_loop()
        self.thread = threading.Thread(target=self.loop.run_forever)
        self.thread.start()
        self.get_logger().info("AsyncServiceNode initialized")

        self.create_service(Trigger, "start_async_task", self.handle_service)

    def handle_service(self, request, response):
        self.loop.call_soon_threadsafe(asyncio.create_task, self.async_task())
        response.success = True
        response.message = "Async task started."
        return response

    async def async_task(self):
        self.get_logger().info("Async task started")
        for i in range(5):
            self.get_logger().info(f"Async task iteration {i}")
            await asyncio.sleep(1)

    def destroy_node(self):
        self.loop.call_soon_threadsafe(self.loop.stop)
        self.thread.join()
        super().destroy_node()


def main(args=None):
    rclpy.init(args=args)
    node = AsyncServiceNode()
    try:
        rclpy.spin(node)
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == "__main__":
    main()
