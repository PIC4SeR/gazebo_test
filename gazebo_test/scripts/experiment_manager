#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rclpy.executors import MultiThreadedExecutor, SingleThreadedExecutor
from gazebo_test.tasks.go_to_pose import ExperimentManager

from rclpy.guard_condition import GuardCondition
import asyncio
from typing import Optional, List, Dict, Any, Union
import threading


async def run(exp_menager: ExperimentManager):

    while exp_menager.end is False:
        future_initialize = exp_menager.initialize()
        await future_initialize

        exp_menager.get_logger().info("Experiment initialized")
        future_run_experiment = exp_menager.run_experiments()
        await future_run_experiment
        exp_menager.get_logger().info("Experiment finished")


def main():
    rclpy.init()
    exp_menager = ExperimentManager()

    # Create a MultiThreadedExecutor
    executor = MultiThreadedExecutor(num_threads=4)
    executor.add_node(exp_menager)

    # Start the executor in a separate thread
    executor_thread = threading.Thread(target=executor.spin, daemon=True)
    executor_thread.start()

    # Run the asyncio event loop
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(run(exp_menager))
    finally:
        exp_menager.destroy_node()
        rclpy.shutdown()
        executor_thread.join()


if __name__ == "__main__":
    main()
